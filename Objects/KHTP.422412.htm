<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\KHTP.422412.346\Objects\KHTP.422412.346_BUSO]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\KHTP.422412.346\Objects\KHTP.422412.346_BUSO</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060020: Last Updated: Mon Sep 24 20:36:51 2018
<BR><P>
<H3>Maximum Stack Usage =        128 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; pwm_Init &rArr; pwm_InitTimer &rArr; GammaCorrection &rArr; __aeabi_ddiv
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[4f]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3a]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[2a]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3a]">ADC1_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[47]">CEC_CAN_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[37]">DMA1_Channel1_IRQHandler</a> from stm32_it.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[38]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[39]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[33]">EXTI0_1_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[34]">EXTI2_3_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[35]">EXTI4_15_IRQHandler</a> from stm32_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[31]">FLASH_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[2a]">HardFault_Handler</a> from stm32_it.o(i.HardFault_Handler) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[42]">I2C1_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[4b]">KeyboardScan</a> from keyboard.o(i.KeyboardScan) referenced from main.o(i.main)
 <LI><a href="#[29]">NMI_Handler</a> from stm32_it.o(i.NMI_Handler) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[2f]">PVD_VDDIO2_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[2c]">PendSV_Handler</a> from stm32_it.o(i.PendSV_Handler) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[32]">RCC_CRS_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[30]">RTC_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[4d]">Reset_Handler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[43]">SPI1_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[44]">SPI2_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[2b]">SVC_Handler</a> from stm32_it.o(i.SVC_Handler) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[2d]">SysTick_Handler</a> from systick.o(i.SysTick_Handler) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[49]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f042.o(.text)
 <LI><a href="#[3f]">TIM14_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[40]">TIM16_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[41]">TIM17_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[3b]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[3c]">TIM1_CC_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[3d]">TIM2_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[3e]">TIM3_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[36]">TSC_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[45]">USART1_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[46]">USART2_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[22]">USBD_DataInStage</a> from usbd_core.o(i.USBD_DataInStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[21]">USBD_DataOutStage</a> from usbd_core.o(i.USBD_DataOutStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[1e]">USBD_HID_DataIn</a> from usbd_custom_hid_core.o(i.USBD_HID_DataIn) referenced 2 times from usbd_custom_hid_core.o(.data)
 <LI><a href="#[1f]">USBD_HID_DataOut</a> from usbd_custom_hid_core.o(i.USBD_HID_DataOut) referenced 2 times from usbd_custom_hid_core.o(.data)
 <LI><a href="#[1b]">USBD_HID_DeInit</a> from usbd_custom_hid_core.o(i.USBD_HID_DeInit) referenced 2 times from usbd_custom_hid_core.o(.data)
 <LI><a href="#[1d]">USBD_HID_EP0_RxReady</a> from usbd_custom_hid_core.o(i.USBD_HID_EP0_RxReady) referenced 2 times from usbd_custom_hid_core.o(.data)
 <LI><a href="#[20]">USBD_HID_GetCfgDesc</a> from usbd_custom_hid_core.o(i.USBD_HID_GetCfgDesc) referenced 2 times from usbd_custom_hid_core.o(.data)
 <LI><a href="#[1a]">USBD_HID_Init</a> from usbd_custom_hid_core.o(i.USBD_HID_Init) referenced 2 times from usbd_custom_hid_core.o(.data)
 <LI><a href="#[1c]">USBD_HID_Setup</a> from usbd_custom_hid_core.o(i.USBD_HID_Setup) referenced 2 times from usbd_custom_hid_core.o(.data)
 <LI><a href="#[25]">USBD_Reset</a> from usbd_core.o(i.USBD_Reset) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[27]">USBD_Resume</a> from usbd_core.o(i.USBD_Resume) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[24]">USBD_SOF</a> from usbd_core.o(i.USBD_SOF) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[23]">USBD_SetupStage</a> from usbd_core.o(i.USBD_SetupStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[26]">USBD_Suspend</a> from usbd_core.o(i.USBD_Suspend) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[13]">USBD_USR_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[17]">USBD_USR_DeviceConfigured</a> from usbd_usr.o(i.USBD_USR_DeviceConfigured) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[e]">USBD_USR_DeviceDescriptor</a> from usbd_desc.o(i.USBD_USR_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[16]">USBD_USR_DeviceReset</a> from usbd_usr.o(i.USBD_USR_DeviceReset) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[19]">USBD_USR_DeviceResumed</a> from usbd_usr.o(i.USBD_USR_DeviceResumed) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[18]">USBD_USR_DeviceSuspended</a> from usbd_usr.o(i.USBD_USR_DeviceSuspended) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[15]">USBD_USR_Init</a> from usbd_usr.o(i.USBD_USR_Init) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[14]">USBD_USR_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_USR_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[f]">USBD_USR_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_USR_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[10]">USBD_USR_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[11]">USBD_USR_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[12]">USBD_USR_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_USR_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[48]">USB_IRQHandler</a> from stm32_it.o(i.USB_IRQHandler) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[4c]">WDTReset</a> from wdt.o(i.WDTReset) referenced from main.o(i.main)
 <LI><a href="#[2e]">WWDG_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[4e]">__main</a> from __main.o(!!!main) referenced from startup_stm32f042.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[50]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[52]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[eb]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ec]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ed]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[58]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[ee]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[53]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[ef]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[fe]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[100]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[101]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[102]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[5d]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[103]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[104]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[105]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[106]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[107]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[108]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[109]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[51]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[10a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[55]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[57]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[10b]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[59]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; pwm_Init &rArr; pwm_InitTimer &rArr; GammaCorrection &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[10c]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[7a]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5c]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[10d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[5e]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[4d]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))

<P><STRONG><a name="[10f]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[3a]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CEC_CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PVD_VDDIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f042.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[60]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardInit
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardScan
</UL>

<P><STRONG><a name="[110]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[65]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[111]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystickInit
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTStart
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystickInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystickAddFunction
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardScan
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_GetAPB2
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_InitTimer
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GammaCorrection
</UL>

<P><STRONG><a name="[117]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GammaCorrection
</UL>

<P><STRONG><a name="[6a]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[69]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[118]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GammaCorrection
</UL>

<P><STRONG><a name="[119]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GammaCorrection
</UL>

<P><STRONG><a name="[11a]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GammaCorrection
</UL>

<P><STRONG><a name="[11b]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPersent
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_InitTimer
</UL>

<P><STRONG><a name="[11c]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[11d]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPersent
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GammaCorrection
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_InitTimer
</UL>

<P><STRONG><a name="[11e]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[11f]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[72]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[54]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[74]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[5]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[121]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[122]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[73]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[123]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[5b]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[77]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[76]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[5f]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[7b]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[7c]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[126]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>CRS_AutomaticCalibrationCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_crs.o(i.CRS_AutomaticCalibrationCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BSP_Init
</UL>

<P><STRONG><a name="[e0]"></a>CRS_FrequencyErrorCounterCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_crs.o(i.CRS_FrequencyErrorCounterCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BSP_Init
</UL>

<P><STRONG><a name="[de]"></a>CRS_SynchronizationSourceConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_crs.o(i.CRS_SynchronizationSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BSP_Init
</UL>

<P><STRONG><a name="[7d]"></a>CTR</STRONG> (Thumb, 610 bytes, Stack size 32 bytes, usb_dcd_int.o(i.CTR))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CTR &rArr; DCD_EP_Tx &rArr; SetEPDblBuffCount
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxCount
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxCount
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPDblBuf1Count
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPDblBuf0Count
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetENDPOINT
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeUserBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[8f]"></a>ClearDTOG_RX</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_core.o(i.ClearDTOG_RX))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
</UL>

<P><STRONG><a name="[90]"></a>ClearDTOG_TX</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_core.o(i.ClearDTOG_TX))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
</UL>

<P><STRONG><a name="[88]"></a>ConfigVirualPort</STRONG> (Thumb, 62 bytes, Stack size 36 bytes, gpio_driver.o(i.ConfigVirualPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ConfigVirualPort &rArr; TalkPort
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TalkPort
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpeedPin
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinPUPD
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinPPorOD
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardInit
</UL>

<P><STRONG><a name="[d2]"></a>DCD_DevConnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_dcd.o(i.DCD_DevConnect))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[8e]"></a>DCD_EP_Close</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCD_EP_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToggleDTOG_TX
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToggleDTOG_RX
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_DeInit
</UL>

<P><STRONG><a name="[95]"></a>DCD_EP_ClrStall</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_EP_ClrStall
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[96]"></a>DCD_EP_Open</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DCD_EP_Open &rArr; SetEPDblBuffAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToggleDTOG_TX
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToggleDTOG_RX
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPType
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxAddr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxAddr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPDoubleBuff
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPDblBuffAddr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
</UL>

<P><STRONG><a name="[85]"></a>DCD_EP_PrepareRx</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_PrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DCD_EP_PrepareRx &rArr; SetEPDblBuffCount
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPDblBuffCount
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR
</UL>

<P><STRONG><a name="[cc]"></a>DCD_EP_SetAddress</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, usb_dcd.o(i.DCD_EP_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DCD_EP_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[9e]"></a>DCD_EP_Stall</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_Stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_EP_Stall
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[87]"></a>DCD_EP_Tx</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DCD_EP_Tx &rArr; SetEPDblBuffCount
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPDblBuffCount
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetENDPOINT
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeUserBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SendReport
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR
</UL>

<P><STRONG><a name="[a0]"></a>DCD_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetISTR
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCNTR
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBTABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[ce]"></a>DCD_PMA_Config</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, usb_dcd.o(i.DCD_PMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DCD_PMA_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
</UL>

<P><STRONG><a name="[37]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_it.o(i.DMA1_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_it.o(i.EXTI4_15_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>FlashRead</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, writeflesh.o(i.FlashRead))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>FlashWrite</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, writeflesh.o(i.FlashWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FlashWrite &rArr; Internal_Flash_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockFlesh
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Internal_Flash_Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Internal_Flash_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardScan
</UL>

<P><STRONG><a name="[84]"></a>FreeUserBuffer</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb_core.o(i.FreeUserBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR
</UL>

<P><STRONG><a name="[a9]"></a>GammaCorrection</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pwm.o(i.GammaCorrection))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GammaCorrection &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPersent
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_InitTimer
</UL>

<P><STRONG><a name="[7e]"></a>GetENDPOINT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.GetENDPOINT))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR
</UL>

<P><STRONG><a name="[7f]"></a>GetEPDblBuf0Count</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_core.o(i.GetEPDblBuf0Count))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR
</UL>

<P><STRONG><a name="[83]"></a>GetEPDblBuf1Count</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_core.o(i.GetEPDblBuf1Count))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR
</UL>

<P><STRONG><a name="[81]"></a>GetEPRxCount</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_core.o(i.GetEPRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR
</UL>

<P><STRONG><a name="[80]"></a>GetEPTxCount</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_core.o(i.GetEPTxCount))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR
</UL>

<P><STRONG><a name="[ae]"></a>Get_SerialNum</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbd_desc.o(i.Get_SerialNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[2a]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>Internal_Flash_Erase</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, writeflesh.o(i.Internal_Flash_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Internal_Flash_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[a7]"></a>Internal_Flash_Write</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, writeflesh.o(i.Internal_Flash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Internal_Flash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[b0]"></a>KeyboardInit</STRONG> (Thumb, 516 bytes, Stack size 48 bytes, keyboard.o(i.KeyboardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = KeyboardInit &rArr; ConfigVirualPort &rArr; TalkPort
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigVirualPort
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>KeyboardScan</STRONG> (Thumb, 706 bytes, Stack size 24 bytes, keyboard.o(i.KeyboardScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = KeyboardScan &rArr; PwmSetPersent &rArr; GammaCorrection &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPersent
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_low
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TogglePin
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Value
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinModeVirtualPort
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinMode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[29]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>NVIC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f0xx_misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BSP_EnableInterrupt
</UL>

<P><STRONG><a name="[82]"></a>PMAToUserBufferCopy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_core.o(i.PMAToUserBufferCopy))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR
</UL>

<P><STRONG><a name="[2c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>PinAltFunc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gpio_driver.o(i.PinAltFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PinAltFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_InitChannel
</UL>

<P><STRONG><a name="[8a]"></a>PinMode</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, gpio_driver.o(i.PinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardScan
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinModeVirtualPort
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigVirualPort
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_InitChannel
</UL>

<P><STRONG><a name="[b1]"></a>PinModeVirtualPort</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, gpio_driver.o(i.PinModeVirtualPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PinModeVirtualPort &rArr; PinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardScan
</UL>

<P><STRONG><a name="[8d]"></a>PinPPorOD</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio_driver.o(i.PinPPorOD))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigVirualPort
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_InitChannel
</UL>

<P><STRONG><a name="[8c]"></a>PinPUPD</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpio_driver.o(i.PinPUPD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PinPUPD
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigVirualPort
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_InitChannel
</UL>

<P><STRONG><a name="[b3]"></a>Pin_Value</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gpio_driver.o(i.Pin_Value))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardScan
</UL>

<P><STRONG><a name="[b6]"></a>PwmSetPersent</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, pwm.o(i.PwmSetPersent))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PwmSetPersent &rArr; GammaCorrection &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GammaCorrection
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_SetValue
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_GetChannel
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardScan
</UL>

<P><STRONG><a name="[dc]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BSP_Init
</UL>

<P><STRONG><a name="[dd]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_USBCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BSP_Init
</UL>

<P><STRONG><a name="[bc]"></a>Resume</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, usbd_pwr.o(i.Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Resume &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[be]"></a>Resume_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_pwr.o(i.Resume_Init))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
</UL>

<P><STRONG><a name="[2b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>SendData</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, keyboard.o(i.SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SendData &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; SetEPDblBuffCount
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SendReport
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardScan
</UL>

<P><STRONG><a name="[a3]"></a>SetBTABLE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_core.o(i.SetBTABLE))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[a1]"></a>SetCNTR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_core.o(i.SetCNTR))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[99]"></a>SetEPDblBuffAddr</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, usb_core.o(i.SetEPDblBuffAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetEPDblBuffAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[9d]"></a>SetEPDblBuffCount</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, usb_core.o(i.SetEPDblBuffCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetEPDblBuffCount
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[98]"></a>SetEPDoubleBuff</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_core.o(i.SetEPDoubleBuff))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[9b]"></a>SetEPRxAddr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_core.o(i.SetEPRxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[9c]"></a>SetEPRxCount</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usb_core.o(i.SetEPRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[93]"></a>SetEPRxStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usb_core.o(i.SetEPRxStatus))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
</UL>

<P><STRONG><a name="[9a]"></a>SetEPTxAddr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_core.o(i.SetEPTxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[9f]"></a>SetEPTxCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_core.o(i.SetEPTxCount))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>

<P><STRONG><a name="[92]"></a>SetEPTxStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb_core.o(i.SetEPTxStatus))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
</UL>

<P><STRONG><a name="[97]"></a>SetEPType</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_core.o(i.SetEPType))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[a2]"></a>SetISTR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_core.o(i.SetISTR))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[8b]"></a>SetSpeedPin</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, gpio_driver.o(i.SetSpeedPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSpeedPin
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigVirualPort
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_InitChannel
</UL>

<P><STRONG><a name="[e2]"></a>Suspend</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbd_pwr.o(i.Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[2d]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, systick.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SystemInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_stm32f0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>SystickAddFunction</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, systick.o(i.SystickAddFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystickAddFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>SystickInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, systick.o(i.SystickInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystickInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_GetSYS
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>SystickScanEvent</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, systick.o(i.SystickScanEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystickScanEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>TalkPort</STRONG> (Thumb, 206 bytes, Stack size 20 bytes, gpio_driver.o(i.TalkPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TalkPort
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigVirualPort
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_InitChannel
</UL>

<P><STRONG><a name="[91]"></a>ToggleDTOG_RX</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_core.o(i.ToggleDTOG_RX))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
</UL>

<P><STRONG><a name="[94]"></a>ToggleDTOG_TX</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_core.o(i.ToggleDTOG_TX))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
</UL>

<P><STRONG><a name="[b5]"></a>TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio_driver.o(i.TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardScan
</UL>

<P><STRONG><a name="[d4]"></a>USBD_ClrCfg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_ClrCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ClrCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[c5]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_CtlContinueRx &rArr; DCD_EP_PrepareRx &rArr; SetEPDblBuffCount
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[c6]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_CtlContinueSendData &rArr; DCD_EP_Tx &rArr; SetEPDblBuffCount
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[c7]"></a>USBD_CtlError</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_req.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_CtlError &rArr; DCD_EP_Stall
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Setup
</UL>

<P><STRONG><a name="[c8]"></a>USBD_CtlPrepareRx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlPrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_CtlPrepareRx &rArr; DCD_EP_PrepareRx &rArr; SetEPDblBuffCount
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Setup
</UL>

<P><STRONG><a name="[c9]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_CtlReceiveStatus &rArr; DCD_EP_PrepareRx &rArr; SetEPDblBuffCount
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[ca]"></a>USBD_CtlSendData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; SetEPDblBuffCount
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Setup
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[cb]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; SetEPDblBuffCount
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[da]"></a>USBD_GetString</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ProductStrDescriptor
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ManufacturerStrDescriptor
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_InterfaceStrDescriptor
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[1e]"></a>USBD_HID_DataIn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_custom_hid_core.o(i.USBD_HID_DataIn))
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_core.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>USBD_HID_DataOut</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_custom_hid_core.o(i.USBD_HID_DataOut))
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_core.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>USBD_HID_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_custom_hid_core.o(i.USBD_HID_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_HID_DeInit &rArr; DCD_EP_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_core.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>USBD_HID_EP0_RxReady</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_custom_hid_core.o(i.USBD_HID_EP0_RxReady))
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_core.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>USBD_HID_GetCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_custom_hid_core.o(i.USBD_HID_GetCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_core.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>USBD_HID_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_custom_hid_core.o(i.USBD_HID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_HID_Init &rArr; DCD_EP_Open &rArr; SetEPDblBuffAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_PMA_Config
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_core.o(.data)
</UL>
<P><STRONG><a name="[bf]"></a>USBD_HID_SendReport</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_custom_hid_core.o(i.USBD_HID_SendReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; SetEPDblBuffCount
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
</UL>

<P><STRONG><a name="[1c]"></a>USBD_HID_Setup</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, usbd_custom_hid_core.o(i.USBD_HID_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_HID_Setup &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; SetEPDblBuffCount
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_core.o(.data)
</UL>
<P><STRONG><a name="[cf]"></a>USBD_Init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_Init &rArr; Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BSP_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BSP_EnableInterrupt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_DevConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usbd_req.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[d5]"></a>USBD_SetCfg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[d7]"></a>USBD_StdDevReq</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, usbd_req.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; SetEPDblBuffCount
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[d9]"></a>USBD_StdEPReq</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; SetEPDblBuffCount
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[d8]"></a>USBD_StdItfReq</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; SetEPDblBuffCount
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[13]"></a>USBD_USR_ConfigStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_USR_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>USBD_USR_DeviceConfigured</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceConfigured))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBD_USR_DeviceDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_USR_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>USBD_USR_DeviceReset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceReset))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>USBD_USR_DeviceResumed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceResumed))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>USBD_USR_DeviceSuspended</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceSuspended))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>USBD_USR_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_Init))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>USBD_USR_InterfaceStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_USR_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>USBD_USR_LangIDStrDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_USR_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBD_USR_ManufacturerStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_USR_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>USBD_USR_ProductStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_USR_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>USBD_USR_SerialStrDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_USR_SerialStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[d1]"></a>USB_BSP_EnableInterrupt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_BSP_EnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_BSP_EnableInterrupt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[d0]"></a>USB_BSP_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_BSP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRS_SynchronizationSourceConfig
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRS_FrequencyErrorCounterCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRS_AutomaticCalibrationCmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_USBCLKConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[48]"></a>USB_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32_it.o(i.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USB_IRQHandler &rArr; USB_Istr &rArr; CTR &rArr; DCD_EP_Tx &rArr; SetEPDblBuffCount
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>USB_Istr</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, usb_dcd_int.o(i.USB_Istr))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USB_Istr &rArr; CTR &rArr; DCD_EP_Tx &rArr; SetEPDblBuffCount
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>UnlockFlesh</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, writeflesh.o(i.UnlockFlesh))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[86]"></a>UserToPMABufferCopy</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.UserToPMABufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserToPMABufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR
</UL>

<P><STRONG><a name="[4c]"></a>WDTReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wdt.o(i.WDTReset))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[e3]"></a>WDTStart</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, wdt.o(i.WDTStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WDTStart
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_pwr.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Setup
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[e4]"></a>clock_GetAPB2</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, clock.o(i.clock_GetAPB2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clock_GetAPB2
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_InitTimer
</UL>

<P><STRONG><a name="[c4]"></a>clock_GetSYS</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.clock_GetSYS))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystickInit
</UL>

<P><STRONG><a name="[a8]"></a>flash_lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, writeflesh.o(i.flash_lock))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[5a]"></a>main</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = main &rArr; pwm_Init &rArr; pwm_InitTimer &rArr; GammaCorrection &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTStart
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystickScanEvent
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystickInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystickAddFunction
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRead
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPersent
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_low
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigVirualPort
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b2]"></a>output_low</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio_driver.o(i.output_low))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardScan
</UL>

<P><STRONG><a name="[e6]"></a>pwm_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pwm.o(i.pwm_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pwm_Init &rArr; pwm_InitTimer &rArr; GammaCorrection &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_InitTimer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_InitChannel
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_GetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPersent
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_InitTimer
</UL>

<P><STRONG><a name="[128]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c0]"></a>SetSysClock</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, system_stm32f0xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b8]"></a>pwm_GetChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm.o(i.pwm_GetChannel))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPersent
</UL>

<P><STRONG><a name="[e9]"></a>pwm_InitChannel</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, pwm.o(i.pwm_InitChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pwm_InitChannel &rArr; TalkPort
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TalkPort
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpeedPin
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinPUPD
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinPPorOD
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinMode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinAltFunc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_Init
</UL>

<P><STRONG><a name="[e8]"></a>pwm_InitTimer</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, pwm.o(i.pwm_InitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pwm_InitTimer &rArr; GammaCorrection &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_GetAPB2
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GammaCorrection
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_Init
</UL>

<P><STRONG><a name="[b9]"></a>pwm_SetValue</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pwm.o(i.pwm_SetValue))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPersent
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_InitChannel
</UL>

<P><STRONG><a name="[af]"></a>IntToUnicode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbd_desc.o(i.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>

<P><STRONG><a name="[22]"></a>USBD_DataInStage</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBD_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; DCD_EP_PrepareRx &rArr; SetEPDblBuffCount
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_SetAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>USBD_DataOutStage</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_DataOutStage &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; SetEPDblBuffCount
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>USBD_Reset</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_Reset &rArr; DCD_EP_Open &rArr; SetEPDblBuffAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_PMA_Config
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>USBD_Resume</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>USBD_SOF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SOF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>USBD_SetupStage</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; SetEPDblBuffCount
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>USBD_Suspend</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[cd]"></a>USBD_GetDescriptor</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; SetEPDblBuffCount
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[d3]"></a>USBD_SetConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; SetEPDblBuffCount
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetCfg
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrCfg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[79]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
